We will create a simple react app that uses a json file to render some movie cards from scratch using webpack and babel, 'create-react-app' will not be used ;).

SUMMARY
SET UP JAVASCRIPT DEVELOPMENT ENVIRONMENT
	1.1 Initialize the project
		We run 'npm init -y' to create a 'package.json' file that will define the project dependencies.

	1.2 Add web pack to the project
		From the docs: "At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph which maps every module your project needs and generates one or more bundles" (https://webpack.js.org/concepts/).

		So "Webpack is a tool that lets you compile JavaScript modules, also known as module bundler. Given a large number of files, it generates a single file (or a few files) that run your app" (https://flaviocopes.com/webpack/).

		This means webpack lets you build javascript applications without worrying too much on dependencies, when you run it, returns a compiled version of your code that you can deploy in a web server and use.
		
		We install it with

			'npm install --save-dev webpack webpack-cli'

		This command installs webpack and its cli as a dev dependency, wich means they won't be included in the production build.

	1.3 Configure webpack
		We need to add webpack in the start and build scripts of the package.json file

			...

			"scripts": {
			    "start": "webpack --mode development",
			    "build": "webpack --mode production",
			    "test": "echo \"Error: no test specified\" && exit 1"
			  }

			...

		'npm start' will run webpack in development mode and 'npm build' will run webpack in production mode.

	1.4 Create entry point for the app
		We create a new directory named 'src' and a new file called 'index.js' inside it.

CONFIGURING WEBPACK TO WORK WITH REACT
	2.1 Install react and react-dom into the project

		'npm install react react-dom'

		This command adds react and react-dom to the webpack dependencies, notice we don't install them as 'dev' dependencies.

	2.2 Install Babel and it's related packages
		We need to compile the react code into a javascript version that every browser can read, we use Babel for that

		'npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader'

	2.3 Configure loader, in order to call Babel when we run the application
		We create a file named 'webpack.config.js' in the root directory and add the following code:

			module.exports = {
				module: {
					rules: [
						{
							test: /\.js$/,
							exclude: /node_modules/,
							use: {
								loader:'babel-loader',
							},
						},
					],
				},
			}

		This code tells webpack to use the babel compiler for every file with the .js extension, excluding the .js files in the node_modiles directory.

	2.4 Create babel's configuration file
		We create a new file in the root directory named '.babelrc' and place the following code:

			{
				"presets": [
					[
						"@babel/preset-env",
						{
							"targets": {
								"node": "current"
							}
						}
					],
					"@babel/react"
				]
			}

	2.5 Configuring files and react scripts to work with webpack
		2.5.1 First we create the app's entry point in the src\index.js file, we add this code:
			
			import React from 'react';
			import ReactDOM from 'react-dom';

			const App = () => {
			    return <h1>movieList</h1>
			}

			ReactDOM.render(<App/>, document.getElementById('root'));

			It gets the html 'root' component and renders the react App component

		2.5.2 Then we create the src\index.html file, and add the following code:

			<!DOCTYPE html>
			<html lang="en">
			<head>
			    <meta charset="UTF-8">
			    <meta http-equiv="X-UA-Compatible" content="IE=edge">
			    <meta name="viewport" content="width=device-width, initial-scale=1.0">
			    <title>movieList</title>
			</head>
			<body>
			    <section id="root"></section>
			</body>
			</html>

			The code creates the 'root' element in which the app will be rendered.

		2.5.3 Extend webpack to bundle src\index.js and index.html files
			We must install 

				npm install --save-dev html-webpack-plugin

			And add it to the webpack.config.js

				const HtmlWebPackPlugin = require('html-webpack-plugin');

				const htmlPlugin = new HtmlWebPackPlugin({
					template: './src/index.html',
					filename: './index.html',
				});

				module.exports = {
				    module: {
				        rules: [
				            {
				                test: /\.js$/,
				                exclude: /node_modules/,
				                use: {
				                    loader:'babel-loader',
				                },
				            },
				        ],
				    },

				    plugins: [htmlPlugin],
				}

			The htmlPlugin const bundles the index.html file wih the js scripts that render the react app, if we run 'npm start' it will bundle a new dist/index.html file calling dist/main.js that contains the react app.

		2.5.4 Creating a development server
			If you want to see your app you should open the index.html file from the /dist folder, and run 'npm start' every time you made a change, this may feel a little bit tedious, fortunately we have a package to handle that. We run:

				npm install --save-dev webpack-dev-server

			And edit the 'start' script at package.json, to call a webpack local server instance, the '--open' flag makes sure webpack is restarted every time an update is made to any of the project files.

				...

				"scripts": {
					"start": "webpack-dev-server --mode development --open", // <--- We changed this line :3
					"build": "webpack --mode production",
					"test": "echo \"Error: no test specified\" && exit 1"
				},

				...

			A note of caution
			It is possible that if you follow all this steps in 2021 (or later) and run 'npm start' the script throws an error that includes this line:

				"Error: Cannot find module 'webpack-cli/bin/config-yargs'"

			According to a stack overlfow thread (https://stackoverflow.com/questions/59611597/error-cannot-find-module-webpack-cli-bin-config-yargs), this may be due to the webpack version, the latest one being incompatible with webpack-dev-server, this may change in the future, but if you don't want to wait until the devs launch a patch, you can install the webpack 3 cli (the older version) and the error should disappear.

				'npm install webpack-cli@3.3.11'

			You can also try some the thread solutions lol.

BUILDING THE APP
	3.1 Create the project's structure
		There is no explicit rule on how to structure a react app code, but two common aproaches are to order the files by type or by feature, I'll be using the second one because I'm a little bit more familiar with it.

		So, right now I'm not sure of what components the app will have, but we can think in 'containers' and 'components', the first ones will have state and functionalities (button handlers, forms, etc.) the second ones will only get props and render stuff.

		We'll create two new directories within the /src folder, one named 'containers' and the other named 'components', and within them we'll create a 'MovieCard' and a 'MovieList' folders.

		Finally we create the components and save them in its corresponding index.js files.

	3.2 App component
		It is located at src\index.js, it makes an API call with the fetch() method (https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) and retrieves the movie data, it uses react state to handle the page and search values changes and then resends the API request, to finally render the results calling the <MovieList /> component.

	3.3 MovieList component
		It gets an array of movie objects and renders it using map() with every array item as argument of the callback function wich calls the <MovieCard /> component.

	3.4 MovieCard component
		It gets a movie object and renders it as a card (eventually lol)

ADDING STYLES
	4.1 Install Material UI
		npm install @material-ui/core

	4.2 Install roboto font
		npm install @fontsource/roboto

	4.3 Install svg icons (optional)
		npm install @material-ui/icons

	4.4 Replace vanilla components with the correspondant Material UI components
		4.4.1 Add the Responsive meta tag to the HTML header, this helps with the 'mobile first' approach of MUI (https://material-ui.com/getting-started/usage/#responsive-meta-tag)

		4.4.2 Add <Baseline /> component to normalize all the page within the <App /> component (https://material-ui.com/components/css-baseline/)
		
		4.4.3 Add theme provider to control the app styles (https://material-ui.com/customization/theming/)
			Create src\theme.js file and customize the theme (https://material-ui.com/customization/palette/)
			Wrap the <App /> component with the theme provider

		4.4.4 Rebuild components with material ui
			First we update the search form using a <Grid /> container and items to display the field and the button in the same row.
			Notice that the <Grid item/> can define the number of imaginary columns its childends will have as width of a total of twelve, this value is preceded by the breakpoint where that setting will have effect.

			e.g.

				<Grid item xs={6} sm={4} md={2}> 
					{/*... stuff ...*/}
				</Grid>

			Will ocupy half of the screen on extra small screens (xs) (or six columns out of twelve), but one third on small screens (sm) and just 1/6 on medium and bigger screen sizes.

			You can check the values in pixels of every breakpoint at https://material-ui.com/customization/breakpoints/#breakpoints

			And the rest of the <Grid /> props you can use at https://material-ui.com/components/grid/


COOL LINKS
http://www.omdbapi.com/ - Free API to obtain movie information :o
https://www.freecodecamp.org/news/react-movie-app-tutorial/ - How to fetch data from the API
https://reactjs.org/docs/hooks-state.html - About useState hook
https://reactjs.org/docs/hooks-rules.html - About the use of hooks
https://medium.com/swlh/building-controlled-forms-using-functional-components-in-react-965d033a89bd - Controlled forms using functional components
https://blog.logrocket.com/axios-or-fetch-api/ - When to use fetch() instead of axios
https://material-ui.com/ - Material UI docs